/*
  Copyright 2023 Democracy Developers
  This is a Java re-implementation of raire-rs https://github.com/DemocracyDevelopers/raire-rs
  It attempts to copy the design, API, and naming as much as possible subject to being idiomatic and efficient Java.

  This file is part of raire-java.
  raire-java is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  raire-java is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
  You should have received a copy of the GNU Affero General Public License along with ConcreteSTV.  If not, see <https://www.gnu.org/licenses/>.

 */
package org.cryptobiotic.raire

import com.github.michaelbull.result.*
import org.cryptobiotic.raire.algorithm.RaireResult

/**
 * Represents the solution generated by RAIRE (Risk-Limiting Audits using Improved Risk Estimates) algorithm
 * for a given election problem. It contains metadata about the election and the result or error information
 * depending on the outcome of the assertion generation process.
 *
 * @property metadata A replication of the metadata provided in RaireProblem.
 * @property solution The set of generated assertions in the form of a RaireResult.
 *    If an error when generated, it will provide information on the error.
 */
data class RaireSolution(
    val metadata: RaireMetadata?,
    val solution: Result<RaireResult, RaireError>


) {
    override fun toString() = buildString {
        appendLine("$metadata")
        appendLine("$solution")
    }
}